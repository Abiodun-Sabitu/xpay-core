// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Onboarding Models

model User {
  id                String      @id @default(dbgenerated("gen_random_uuid()"))
  firstName         String?
  lastName          String?
  email             String      @unique
  phoneNo           String?     @unique
  password          String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  wallets           Wallet[]
  kycProfile        KYCProfile? @relation(fields: [kycProfileId], references: [id])
  kycProfileId      String?     @unique
  emailVerified     Boolean     @default(false)
  verificationToken String?     // Token for email verification
  tokenExpiry       DateTime?   // Expiry date for the verification token
  otp               String?     // OTP for login or other actions
  otpExpiry         DateTime?   // Expiry date for OTP
}

model KYCProfile {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  street            String
  photo             String?   // URL to a photo
  bvn               String?   // Bank Verification Number
  address           String?
  landmark          String?
  city              String
  state             String
  country           String
  addressDocument   String    // URL or path to documentary evidence
  validID           String    // URL or path to an image of the ID
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User?     @relation
  userId            String?   @unique
}


model Wallet {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  accountNumber   String        @unique
  currency        String
  balance         String        @default("0.00") 
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  transactions    Transaction[]
  @@unique([userId, currency])
}

model Transaction {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  amount          Float
  createdAt       DateTime  @default(now())
  wallet          Wallet    @relation(fields: [walletId], references: [id])
  walletId        String
  type            String    // "DEPOSIT" or "WITHDRAWAL"
  description     String?
}


